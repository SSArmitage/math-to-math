{"version":3,"sources":["SpeechRecognition.js","App.js","serviceWorker.js","index.js"],"names":["SpeechRecognition","startRecognition","setState","startButtonDisabled","state","recognizer","startContinuousRecognitionAsync","error","stopRecognition","stopContinuousRecognitionAsync","stopButtonDisabled","apiKey","process","serviceRegion","phraseDiv","speechConfig","SpeechConfig","fromSubscription","this","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","SpeechRecognizer","recognizing","s","e","console","log","result","text","recognized","reason","phrase","canceled","CancellationReason","Error","errorCode","errorDetails","sessionStopped","className","onClick","disabled","id","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+YA4HeA,E,kDAhHX,aAAe,IAAD,8BACV,gBAiEJC,iBAAmB,WAGf,EAAKC,SAAS,CACVC,qBAAqB,IAGN,EAAKC,MAAMC,WACnBC,iCAAgC,eAAW,SAACC,QA1E7C,EA6EdC,gBAAkB,WAGK,EAAKJ,MAAMC,WACnBI,gCAA+B,eAAW,SAACF,OAEtD,EAAKL,SAAS,CACVC,qBAAqB,KAlFzB,EAAKC,MAAQ,CACTD,qBAAqB,EACrBO,oBAAoB,EACpBL,WAAY,GACZM,OAAQC,mCACRC,cAAeD,gBACfE,UAAW,IARL,E,gEAYO,IAAD,OAEVC,EAAeC,IAAaC,iBAAiBC,KAAKd,MAAMO,OAAQO,KAAKd,MAAMS,eACjFE,EAAaI,0BAA4B,QACzC,IAAMC,EAAcC,IAAYC,6BAG1BjB,EAAa,IAAIkB,IAAiBR,EAAcK,GACtDF,KAAKhB,SAAS,CACVG,WAAYA,IAKhBA,EAAWmB,YAAc,SAACC,EAAGC,GACzBC,QAAQC,IAAR,4BAAiCF,EAAEG,OAAOC,QAG9CzB,EAAW0B,WAAa,SAACN,EAAGC,GACxB,GAAuB,GAAnBA,EAAEG,OAAOG,OAAa,CAEtBL,QAAQC,IAAR,2BAAgCF,EAAEG,OAAOC,OAEzC,IAAIG,EAAS,EAAK7B,MAAMU,UACxBmB,GAAUP,EAAEG,OAAOC,KACnB,EAAK5B,SAAS,CACVY,UAAWmB,SAGS,GAAnBP,EAAEG,OAAOG,QAEdL,QAAQC,IAAI,6CAKpBvB,EAAW6B,SAAW,SAACT,EAAGC,GACtBC,QAAQC,IAAR,2BAAgCF,EAAEM,SAE9BN,EAAEM,QAAUG,IAAmBC,QAC/BT,QAAQC,IAAR,+BAAoCF,EAAEW,YACtCV,QAAQC,IAAR,kCAAuCF,EAAEY,eACzCX,QAAQC,IAAI,oDAGhBvB,EAAWI,kCAGfJ,EAAWkC,eAAiB,SAACd,EAAGC,GAC5BC,QAAQC,IAAI,gCACZvB,EAAWI,oC,+BA4Bf,OACI,yBAAK+B,UAAU,qBACX,4BACIC,QAASvB,KAAKjB,iBACdyC,SAAUxB,KAAKd,MAAMD,qBAFzB,qBAKA,4BACIsC,QAASvB,KAAKV,iBADlB,oBAIA,8BACImC,GAAG,YAEHC,MAAO1B,KAAKd,MAAMU,iB,GAzGN+B,aCejBC,G,wDArBb,aAAe,IAAD,8BACZ,gBACK1C,MAAQ,GAFD,E,qDAQZ,OACE,yBAAKoC,UAAU,OACb,yBAAKA,UAAU,WACb,gCACE,6CAEF,kBAAC,EAAD,Y,GAfQK,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLoB,QAAQpB,MAAMA,EAAMyD,c","file":"static/js/main.c80b3e8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    AudioConfig,\n    CancellationDetails,\n    CancellationReason,\n    PhraseListGrammar,\n    ResultReason,\n    SpeechConfig,\n    SpeechRecognizer\n} from \"microsoft-cognitiveservices-speech-sdk\";\n\nclass SpeechRecognition extends Component {\n    constructor() {\n        super();\n        this.state = {\n            startButtonDisabled: false,\n            stopButtonDisabled: false,\n            recognizer: {},\n            apiKey: process.env.REACT_APP_API_KEY,\n            serviceRegion: process.env.REACT_APP_SERVICE_REGION,\n            phraseDiv: \"\"\n        }\n    }\n\n    componentDidMount() {\n        // CONFIGURATION\n        const speechConfig = SpeechConfig.fromSubscription(this.state.apiKey, this.state.serviceRegion);\n        speechConfig.speechRecognitionLanguage = \"en-US\";\n        const audioConfig = AudioConfig.fromDefaultMicrophoneInput();\n        // Initialize a recognizer \n        // need to pass it the speechConfig, as this provides the credentials that the speech service requires to validate your request\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n        this.setState({\n            recognizer: recognizer\n        })\n\n        // INITIALIZE RECOGNIZER EVENTS TO LISTEN FOR\n        // Signal for events containing intermediate recognition results\n        recognizer.recognizing = (s, e) => {\n            console.log(`RECOGNIZING: Text=${e.result.text}`);\n        };\n        // Signal for events containing final recognition results (indicating a successful recognition attempt)\n        recognizer.recognized = (s, e) => {\n            if (e.result.reason == 3) {\n                // recognized speech - ResultReason.Recognized\n                console.log(`RECOGNIZED: Text=${e.result.text}`);\n                // phraseDiv.innerHTML += e.result.text;\n                let phrase = this.state.phraseDiv;\n                phrase += e.result.text;\n                this.setState({\n                    phraseDiv: phrase\n                })\n            }\n            else if (e.result.reason == 0) {\n                // could not recognize speech - ResultReason.NoMatch\n                console.log(\"NOMATCH: Speech could not be recognized.\");\n                // do not add to phraseDiv\n            }\n        };\n        // Signal for events containing canceled recognition results (indicating a recognition attempt that was canceled as a result or a direct cancellation request or, alternatively, a transport or protocol failure)\n        recognizer.canceled = (s, e) => {\n            console.log(`CANCELED: Reason=${e.reason}`);\n\n            if (e.reason == CancellationReason.Error) {\n                console.log(`\"CANCELED: ErrorCode=${e.errorCode}`);\n                console.log(`\"CANCELED: ErrorDetails=${e.errorDetails}`);\n                console.log(\"CANCELED: Did you update the subscription info?\");\n            }\n\n            recognizer.stopContinuousRecognitionAsync();\n        };\n        // Function runs when the \"stop\" button is clicked and recognizer.stopContinuousRecognitionAsync is called\n        recognizer.sessionStopped = (s, e) => {\n            console.log(\"\\n    Session stopped event.\");\n            recognizer.stopContinuousRecognitionAsync();\n        };\n    }\n\n    startRecognition = () => {\n        // Start listening for speech\n        // disable the start button, so the user cannot click it again while speech detection is on (can only click the stop button)\n        this.setState({\n            startButtonDisabled: true\n        })\n        // Start continuous speech recognition\n        const recognizer = this.state.recognizer;\n        recognizer.startContinuousRecognitionAsync(() => { }, (error) => { });\n    }\n\n    stopRecognition = () => {\n        // Stop listening for speech\n        // Stop continuous speech recognition\n        const recognizer = this.state.recognizer;\n        recognizer.stopContinuousRecognitionAsync(() => { }, (error) => { });\n        // un-disable the start button\n        this.setState({\n            startButtonDisabled: false,\n            // phraseDiv: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"speechRecognition\">\n                <button\n                    onClick={this.startRecognition}\n                    disabled={this.state.startButtonDisabled}>\n                    Start Recognition\n                </button>\n                <button\n                    onClick={this.stopRecognition}>\n                    Stop Recognition\n                </button>\n                <textarea\n                    id=\"phraseDiv\"\n                    // style={{\"display: inline-block;width:500px;height:200px\"}}\n                    value={this.state.phraseDiv}\n                >\n                </textarea>\n            </div>\n        )\n    }\n}\n\nexport default SpeechRecognition;","import React, { Component } from 'react';\nimport SpeechRecognition from './SpeechRecognition';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <header>\n            <h1>Math-to-Math</h1>\n          </header>\n          <SpeechRecognition />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}